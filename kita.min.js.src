(function () {
/**
 * almond 0.2.4 Copyright (c) 2011-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);

                name = baseParts.concat(name.split("/"));

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (typeof callback === 'function') {

            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback.apply(defined[name], args);

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        config = cfg;
        return req;
    };

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("../libs/almond", function(){});

/*
 * Kita
 *
 * is.js
 *
 * The `is` function determine the type of a given param against another.
 *
 * Stupid PhantomJS and it's bugs: http://stackoverflow.com/questions/14218670/why-are-null-and-undefined-of-the-type-domwindow
 * This function would be a couple of lines long if not for this bug
 *
 * @author Shann McNicholl (@shannmcnicholl)
 *
 * License Pending
 */

define('is',[],function() {
	function is(obj, type) {
		var it;

		if(typeof type !== "string")	return false;

		it	=	Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();
		if(it === "domwindow") {
			if(obj === undefined)	it = "undefined";
			if(obj === null)		it = "null";
		}

		return (it === type.toLowerCase());
	}

	return is;
});
/*
 * Kita
 *
 * kObject.js
 *
 * The base Kita class. Everything extends this.
 *
 * @author Shann McNicholl (@shannmcnicholl)
 *
 * License Pending
 */

define('kObject',
["./is"],
function(is) {

    var CleanConstructor    =   function() {};

    function kObject() {
        this.id     =   this.generateGuid();

        // Call the initialize function, passing through any arguments
        // this constructor function received
        (is(this.initialize, "function")) && this.initialize.apply(this, arguments);

        return this;
    }


    /*
     * extend
     *
     * This is based heavily on the combination of
     * Backbone.js' extend and inherit methods
     */
    kObject.prototype.extend = function(prototypeProperties, classProperties) {
        var child, parent = this;

        // Set the constructor
        if (prototypeProperties && prototypeProperties.hasOwnProperty('constructor')) {
            child   =   prototypeProperties.constructor;
        } else {
            child   =   function() {
                            parent.apply(this, arguments);
                        };
        }

        // copy over any class properties from the parent
        this.copyProperties(child, parent);

        // Set the prototype chain to inherit from `parent`, without calling
        // `parent`'s constructor function.
        CleanConstructor.prototype  = parent.prototype;
        child.prototype             = new CleanConstructor();

        // Add prototype properties (instance properties) to the subclass,
        // if supplied.
        if (prototypeProperties) {
            this.copyProperties(child.prototype, prototypeProperties);
        }

        // Add static properties to the constructor function, if supplied.
        if (classProperties) this.copyProperties(child, classProperties);

        // Correctly set child's `prototype.constructor`.
        child.prototype.constructor = child;

        // Set a convenience property in case the parent's prototype is needed later.
        child.prototype.__super__             = parent.prototype;

        // Copy over the class extender functions
        child.copyProperties        = this.copyProperties;
        child.extend                = this.extend;

        return child;
    };


    /*
     * copyProperties
     *
     * Copy all object properties into param 1 from all additional
     * arguments provided (n-1)
     *
     */
    kObject.prototype.copyProperties = function(obj) {
        var toCopy  =   Array.prototype.slice.call(arguments, 1),
            i       =   0,
            count   =   toCopy.length;
        
        for( ; i < count; i++) {
            for(var property in toCopy[i]) {
                obj[property]   =   toCopy[i][property];
            }
        }
        
        return obj;
    };


    /*
     * generateGuid
     *
     * Generate a unique ID
     *
     */
    kObject.prototype.generateGuid = function() {
        var uni = function () { return Math.floor(Math.random() * 0x10000).toString(16); };

        return (uni() + uni() + "-" + uni() + "-" + uni() + "-" + uni() + "-" + uni() + uni() + uni());
    };


    /*
     * convertArguments
     *
     * Convert a function's arguments variable into a proper array
     *
     */
    kObject.prototype.convertArguments = function(args) {
        return Array.prototype.slice.call(args);
    };


    kObject.extend          =   kObject.prototype.extend;
    kObject.copyProperties  =   kObject.prototype.copyProperties;

    return kObject;
});
/*
 * Kita
 *
 * pubsub.js
 *
 * The pubSub library within the Kita JS framework
 *
 * @author Shann McNicholl (@shannmcnicholl)
 *
 * License Pending.
 */

define('pubsub',
['./kObject', "./is"],
function(kObject, is) {

	var pubSub	=	kObject.extend({

		constructor:	function pubSub(options) {
			this._callbacks			=	{};
			this._callbacksLength	=	0;
			this.asyncEvents		=	false;		// Default to synchronous events, helps with debugging

			if(!is(options, "object")) return this;

			for(var option in options) {
				this[option]	=	options[option];
			}

			return this;
		},


		/*
		 * bind
		 *
		 * Bind/Register/Subscribe to 1 or more events (separated by a space)
		 */
		bind:	function(ev, callback, context) {
			var events, i, count;

			if(!ev || !callback) return false;

			events	=	ev.split(" ");

			for(i = 0, count = events.length; i < count; i++) {
				// Set the callback holder for this event to an array
				this._callbacks[events[i]] = Array.isArray(this._callbacks[events[i]]) ? this._callbacks[events[i]] : [];

				// Now add the callback and its context
				this._callbacks[events[i]].push({
					callback:	callback,
					context:	context
				});

				this._callbacksLength++;
			}

			return true;
		},


		/*
		 * on
		 *
		 * A wrapper for the bind function
		 */
		on: function() {
			return this.bind.apply(this, arguments);
		},


		/*
		 * unbind
		 *
		 * Unbind/Unregister/Unsubscribe a listener from an event
		 */
		unbind: function unbind(ev, callback) {
			var events, i = 0, count, unbound = false;

			// Invalid input
			if(!ev || !callback)		return false;

			// This event was never bound
			if(!this._callbacks[ev])	return false;

			events	=	this._callbacks[ev];
			if(!Array.isArray(events))	{
				// This should always be an array
				this._callbacks[ev] = [];
				return false;
			}

			for(count = events.length; i < count; i++) {
				if(!is(events[i], "object") || events[i].callback !== callback) continue;

				// Remove this binding
				events.splice(i, 1);
				this._callbacksLength--;
				unbound = true;
			}

			// Remove the event key if no events are attached.
			if(events.length) {
				this._callbacks[ev]	=	events;
			} else {
				delete(this._callbacks[ev]);
			}

			return unbound;
		},


		/*
		 * off
		 *
		 * A wrapper for the bind function
		 */
		off: function() {
			return this.unbind.apply(this, arguments);
		},


		/*
		 * trigger
		 *
		 * Trigger/publish/fire an event
		 */
		trigger: function(ev)  {
			var args, listeners, i, count;

			args		=	this.convertArguments(arguments);

			// Invalid input or no listeners on this event
			if(!ev || !this._callbacks[ev])	return false;


			args		=	args.length > 1  ? args.slice(1) : [];
			listeners	=	this._callbacks[ev];

			if(!Array.isArray(listeners)) {
				// Correct this issue
				this._callbacks[ev]	=	[];
				return false;
			}

			// Loop through the listeners
			for(i = 0, count = listeners.length; i < count; i++) {
				// We need a callback function
				if(!is(listeners[i], "object") || !is(listeners[i].callback, "function"))	continue;

				this._callFunction(listeners[i].callback, args, listeners[i].context);
			}

			return true;
		},


		/*
		 * _callFunction
		 *
		 * Calls the given function in a sync or async manner
		 * depending on this.asyncEvents
		 */
		_callFunction: function(fn, args, context) {
			if(!this.asyncEvents) {
				// Sync
				fn.apply(context, args);
			} else {
				// Async
				setTimeout(function() {
					fn.apply(context, args);
				});
			}

			return true;
		},


		/*
		 * getAllListeners
		 *
		 * Returns the _callbacks array
		 */
		getAllListeners: function getAllListeners() {
			return this._callbacks;
		},


		/*
		 * getListenerLength
		 *
		 * Returns _callbacksLength
		 */
		getListenerLength: function getListenerLength() {
			return this._callbacksLength;
		},


		/*
		 * reset
		 *
		 * Cleanses all callbacks
		 */
		reset: function() {
			this._callbacks			=	{};
			this._callbacksLength	=	0;
		}
	});
	

	return pubSub;
});
/*
 * Kita
 *
 * app.js
 *
 * The Kita app class
 *
 * The App class loads all the modules that make up the application
 * and passes through the intra-module communicator
 *
 * Shann McNicholl
 */
define('app',
['./kObject'],
function(kObject) {

    var App =   kObject.extend({

        // The global app holder selector
        el:             null,

        /*
         * Initialize
         *
         * Runs when the App object is being created
         */
        initialize: function initialize() {
            
        },

    });

    return App;
});
/*
 * Kita
 *
 * icc.js
 *
 * ICC (Intra Controller Communicator)
 *
 * Each Controller gets a reference to the ICC so that they can converse
 * in a decoupled manner.
 *
 * This class is deliberately a singleton.
 *
 * Shann McNicholl (@shannmcnicholl)
 *
 * License pending.
 */
define('icc',
["./pubsub"], function(Pubsub) {

	var ICC = Pubsub.extend({});

	return new ICC();
});
/*
 * Kita
 *
 * controller.js
 *
 * The Kita controller class
 *
 * Shann McNicholl (@shannmcnicholl)
 */

define('controller',
['./kObject', './icc', "./is"],
function(kObject, ICC, is) {

	var Controller = kObject.extend({

		// The Intra Controller Communicator
		icc:				ICC,

		// The first section of the icc namespace
		kitaControllerType:	'vanilla',

		// The second section of the icc namespace
		iccNamespace:		'controller',

		// The list of events that we listen for on the icc (these are prefixed)
		// by and this.kitaControllerType and this.iccNamespace. If the controller
		// wants to listen to events from other controllers then it should prepend
		// the full event namespace with the `@` symbol. This will prevent it from
		// having this.kitaControllerType and this.iccNamespace prepended to it.
		listeners:			null,

		/*
		 * constructor
		 *
		 */
		constructor: function kitaController(args) {
			// Merge in any global attributes
			(is(args, "object")) && this.copyProperties(this, args);

			// Register listeners on the ICC
			(is(this.registerListeners, "function")) && this.registerListeners();
			
			// Run the initialize function for the user
			(is(this.initialize, "function")) && this.initialize.apply(this, arguments);

			(is(this.delegateEvents, "function")) && this.delegateEvents();

			return this;
		},


		/*
		 * Initialize
		 *
		 */
		initialize: function() {},


		/*
		 * registerListeners
		 *
		 * Starts listening on the ICC
		 */
		registerListeners: function() {
			var namespace	=	this.getNamespace(),
				listener;

			// No ICC or listeners, so bomb out
			if(!is(this.icc, "object") || !is(this.listeners, "object"))	return false;

			for(listener in this.listeners) {
				// Don't prepend the namespace to remote event listners (identified by @)
				if(listener.substring(0, 1) === "@") {
					this.icc.on(listener.substring(1), this.listeners[listener], this);
				} else {
					this.icc.on(namespace +":"+ listener, this.listeners[listener], this);
				}
			}

			return true;
		},


		/*
		 * unRegisterListeners
		 *
		 * Stops listening on the ICC
		 */
		unRegisterListeners: function() {
			var namespace	=	this.getNamespace(),
				listener;

			// No ICC or listeners, so bomb out
			if(!this.icc || !this.listeners)	return false;

			for(listener in this.listeners) {
				if(listener.substring(0, 1) === "@") {
					this.icc.off(listener.substring(1), this.listeners[listener], this);
				} else {
					this.icc.off(namespace +":"+ listener, this.listeners[listener], this);
				}
			}

			return true;
		},


		/*
		 * getNamespace
		 *
		 * Returns the conjoined this.kitaControllerType and this.iccNamespace
		 */
		getNamespace: function() {
			return this.kitaControllerType +":"+ this.iccNamespace;
		}

	});

	return Controller;
});
/*
 * Kita
 *
 * dataController.js
 *
 * A Data controller handles the CRUD operations for models and provides an
 * interface to other data or ui controllers to request models (via the ICC).
 *
 * Shann McNicholl (@shannmcnicholl)
 */
define('dataController',
['./controller'],
function(Controller) {

	var dataController	=	Controller.extend({

		// The first section of the icc namespace
		kitaControllerType:	'data',

		// The second section of the icc namespace
		iccNamespace:		'controller',


		/*
		 * Initialize
		 *
		 */
		initialize: function() {

		},


		/*
		 * remove
		 *
		 * Remove/Destroy is the shutdown/delete method for this controller
		 * It stops listening on the ICC. This function should be overloaded
		 * in order to also unbind listeners attached to collections
		 */
		remove: function() {
			this.unRegisterListeners();
		}

	});

	return dataController;
});
/*
 * Kita
 *
 * dom.js
 *
 * A tiny module to add and remove listeners to DOM elements and provide a
 * simple, unified selector interface
 *
 * Shann McNicholl (@shannmcnicholl)
 *
 * License Pending
 */
define('dom',[],function() {
    if(!window || !window.document) {
        return {
            on:     function() {},
            off:    function() {},
            get:    function() {},
            insert: function() {},
            remove: function() {}
        };
    }

    return {
        /*
         * on
         *
         * Attach an event listener to `el`
         *
         * @param `el` needs to be a valid HTML DOM Element
         * @param `event` can be a combination of event or event AND sub-selector under `el` (e.g "click", "click .myClass")
         * @param `callback` is the callback function
         */
        on: function(el, evnt, callback) {
            el; evnt; callback;
        },


        /*
         * off
         *
         * Detach an event listener from `el`
         *
         * @param `el` needs to be a valid HTML DOM Element
         * @param `event` can be a combination of event or event AND sub-selector under `el` (e.g "click", "click .myClass")
         * @param `callback` is the callback function
         */
        off: function(el, evnt, callback) {
            el; evnt; callback;
        },


        /*
         * get
         *
         * Queries `el` for selector
         *
         * @param `el` needs to be a valid HTML DOM Element
         * @param `selector` is a valid CSS selector contained within el
         */
        get: function(el, selector) {
            if(typeof el !== "object" || typeof el.querySelector !== "function")    return false;

            return el.querySelector(selector);
        },


        /*
         * remove
         *
         * Removes the element from the dom
         */
        remove: function(el) {
            if(typeof el !== "object" && typeof el.remove !== "function") {
                return false;
            }

            el.remove();

            return true;
        }
    };
});
/*
 * Kita
 *
 * uiController.js
 *
 * A UI controller loads its associated view(s),
 * listens for events in the DOM and via the ICC.
 *
 * Shann McNicholl (@shannmcnicholl)
 */

define('uiController',
['./controller', "./dom"],
function(Controller, dom) {

    var uiController    =   Controller.extend({

        // DOM element
        el:         null,

        // The selector for this.el (used if this.el is not a valid element)
        selector:   null,

        /*
         * DOM listeners
         *
         * should be in the format of:
         *
         * {
         *  'click .roe-valley':        "itsCold",
         *  'submit .visitLimavady':    "justCause"
         * }
         */
        events:     null,

        // The first section of the icc namespace
        kitaControllerType: 'ui',

        // The second section of the icc namespace
        iccNamespace:       'controller',

        /*
         * Initialize
         *
         */
        initialize: function() {

        },


        /*
         * delegateEvents
         *
         * Setup listeners on the dom
         */
        delegateEvents: function() {
            return this.toggleEvents("on");
        },


        /*
         * undelegateEvents
         *
         * Remove any listeners on the dom
         */
        undelegateEvents: function() {
            return this.toggleEvents("off");
        },


        /*
         * toggleEvents
         *
         * Switches events on and off
         */
        toggleEvents: function(onOff) {
            var events;

            if(typeof this.events !== "object") return false;

            if(onOff !== "off") {
                // We are attempting to listen, make sure we dont duplicate
                this.undelegateEvents();
            }

            // If we do not have a local element, then we have nothing to attach events to
            if(!this.el)    return false;

            events  =   Object.keys(this.events);

            events.forEach(function(evnt) {
                if(onOff === "on") {
                    dom.on(this.el, evnt, this[this.events[evnt]]);
                } else if(onOff === "off") {
                    dom.off(this.el, evnt, this[this.events[evnt]]);
                }
            }, this);

            return this;
        },


        /*
         * remove
         *
         * Remove/Destroy is the shutdown/delete method for this controller
         * It stops listening on the ICC. This function should be overloaded
         * in order to also unbind listeners attached to collections
         */
        remove: function() {

            // Stop listening on the ICC
            this.unRegisterListeners();

            // Stop listening on the DOM element
            this.undelegateEvents();

            // Remove the element from the dom
            dom.remove(this.el);
        }

    });

    return uiController;
});
/*
 * Kita
 *
 * kObject.js
 *
 * The base Kita class. Everything extends this.
 *
 * @author Shann McNicholl (@shannmcnicholl)
 *
 * License Pending
 */

define('kobject',
["./is"],
function(is) {

    var CleanConstructor    =   function() {};

    function kObject() {
        this.id     =   this.generateGuid();

        // Call the initialize function, passing through any arguments
        // this constructor function received
        (is(this.initialize, "function")) && this.initialize.apply(this, arguments);

        return this;
    }


    /*
     * extend
     *
     * This is based heavily on the combination of
     * Backbone.js' extend and inherit methods
     */
    kObject.prototype.extend = function(prototypeProperties, classProperties) {
        var child, parent = this;

        // Set the constructor
        if (prototypeProperties && prototypeProperties.hasOwnProperty('constructor')) {
            child   =   prototypeProperties.constructor;
        } else {
            child   =   function() {
                            parent.apply(this, arguments);
                        };
        }

        // copy over any class properties from the parent
        this.copyProperties(child, parent);

        // Set the prototype chain to inherit from `parent`, without calling
        // `parent`'s constructor function.
        CleanConstructor.prototype  = parent.prototype;
        child.prototype             = new CleanConstructor();

        // Add prototype properties (instance properties) to the subclass,
        // if supplied.
        if (prototypeProperties) {
            this.copyProperties(child.prototype, prototypeProperties);
        }

        // Add static properties to the constructor function, if supplied.
        if (classProperties) this.copyProperties(child, classProperties);

        // Correctly set child's `prototype.constructor`.
        child.prototype.constructor = child;

        // Set a convenience property in case the parent's prototype is needed later.
        child.prototype.__super__             = parent.prototype;

        // Copy over the class extender functions
        child.copyProperties        = this.copyProperties;
        child.extend                = this.extend;

        return child;
    };


    /*
     * copyProperties
     *
     * Copy all object properties into param 1 from all additional
     * arguments provided (n-1)
     *
     */
    kObject.prototype.copyProperties = function(obj) {
        var toCopy  =   Array.prototype.slice.call(arguments, 1),
            i       =   0,
            count   =   toCopy.length;
        
        for( ; i < count; i++) {
            for(var property in toCopy[i]) {
                obj[property]   =   toCopy[i][property];
            }
        }
        
        return obj;
    };


    /*
     * generateGuid
     *
     * Generate a unique ID
     *
     */
    kObject.prototype.generateGuid = function() {
        var uni = function () { return Math.floor(Math.random() * 0x10000).toString(16); };

        return (uni() + uni() + "-" + uni() + "-" + uni() + "-" + uni() + "-" + uni() + uni() + uni());
    };


    /*
     * convertArguments
     *
     * Convert a function's arguments variable into a proper array
     *
     */
    kObject.prototype.convertArguments = function(args) {
        return Array.prototype.slice.call(args);
    };


    kObject.extend          =   kObject.prototype.extend;
    kObject.copyProperties  =   kObject.prototype.copyProperties;

    return kObject;
});
/*
 * Kita
 *
 * collection.js
 *
 * The collection class holds models, provides a filtering
 * mechanism and
 *
 * @author Shann McNicholl (@shannmcnicholl)
 *
 * License Pending
 */

define('collection',
["./kobject", "./is"],
function(kObject, is) {

	var Collection	=	kObject.extend({

		// The model that this collection will be used to manage
		model:	null,

		//


		/*
		 * initialize
		 *
		 */
		initialize: function() {

		},


		/*
		 * add
		 *
		 * Adds a new model to the collection
		 */
		add: function(attrs, options) {
			var model;

			/*
			PSEUDO

			1) Take the attrs provided and feed them in to the model constructor
			2) if options.at is set - put the model into the collection at that position
			3) if options.silent then do not announce the addition

			*/
			// We need an object
			options	=	is(options, "object") ? options : false;

			if(!is(attrs, "object"))	return false;

			model	=	is(this.model, "function") ? new this.model(attrs) : attrs;

			// Add the model at a specifc index?
			if(is(options.index, "number") && options.index <= this.models.length) {
				
			} else {
				// Append
				this.models.push(model);
			}
		},


		/*
		 * bulkAdd
		 *
		 * Adds many models to the collection at one time.
		 * Can take options to silence the triggered events
		 */
		bulkAdd: function(models, options) {
			if(!is(models, "array"))	return false;

			models.forEach(function(model) {
				this.add(model, options);
			}, this);

			return true;
		},


		/*
		 * filter
		 *
		 * Filters the collections models by the keys and values provided
		 * in the attrs object
		 */
		filter: function(attrs) {
			attrs;
		}
	});

	return Collection;
});
/*
 * Kita
 *
 * model.js
 *
 * The Kita moodel class
 *
 * Shann McNicholl (@shannmcnicholl)
 */

define('model',
['./kObject', './pubsub', "./is"],
function(kObject, PubSub, is)  {

    var Model   =   kObject.extend({

        /*
         * constructor
         *
         * Custom constructor for the  App class
         */
        constructor: function kitaModel(attrs, options) {
            this.id             =   this.generateGuid();

            this.attributes     =   {};

            options             =   is(options, "object") ? options : {};
            
            // Merge in the PubSub constructor
            PubSub.call(this);

            this.setAttributes(attrs, options.silent);

            // Call the initialize function with any params the constructor has
            if(is(this.initialize, "function"))  {
                this.initialize.apply(this, arguments);
            }

            return this;
        },


        /*
         * set
         *
         * Set attributes on this model via the set function
         * to ensure that all change listeners here about it
         */
        set: function(attr, value, silent) {
            var prevValue   =   null;

            if(is(attr, "undefined")) return false;

            // Don't set something that we already have
            if(this.attributes[attr] === value) return false;

            prevValue               =   this.attributes[attr];
            this.attributes[attr]   =   value;

            // Trigger the change events if the set is not silent
            if(!silent) {
                // Trigger the specific attr change event
                this.trigger("change:"+ attr, value, prevValue);

                // Trigger the global object change event
                this.trigger("change", attr, value, prevValue);
            }

            return true;
        },


        /*
         * Set Attributes
         *
         * Takes an object and sets each attribute in it
         */
        setAttributes: function(attrs, silent) {
            var attr;

            if(!is(attrs, "object"))    return false;

            for(attr in attrs) {
                this.set(attr, attrs[attr], silent);
            }

            return true;
        },


        /*
         * get
         *
         * Get an attribute from the model
         */
        get: function(attr) {
            // We need a string based attribute key
            if(!is(attr, "string")) return undefined;

            if(attr) return this.attributes[attr];
        },


        /*
         * destroy
         *
         * Properly shuts down the model
         */
        destroy: function() {
            // Remove listeners
            this._callbacks         =   {};
            this._callbacksLength   =   0;
        }
    });


    // Merge in the PubSub library so that changes can be bound.
    kObject.copyProperties(Model.prototype, PubSub.prototype);

    return Model;
});
/*
 * kita.js
 *
 * The Kita MVC framework
 *
 * Shann McNicholl (@shannmcnicholl)
 */
define('kita',
['./pubsub', './app', './controller', './dataController', 'uiController', './collection', './model'],
function(pubSub, App, Controller, DataController, UIController, Collection, Model) {
    var Kita        =   {};

    Kita.pubSub             =   pubSub;
    Kita.app                =   App;
    Kita.Controller         =   Controller;
    Kita.UIController       =   UIController;
    Kita.Data.Controller    =   DataController;
    Kita.Data.Collection    =   Collection;
    Kita.Data.Model         =   Model;

    return Kita;
});
/*
 * Kita
 *
 * Build.js
 *
 * This is used as a header for the built, minified script only.
 */
define('build',
["./kita"], function(Kita) {
	window.Kita	=	Kita;
});
require(["build"]);
}());